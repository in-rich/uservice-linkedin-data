// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-linkedin-data/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockListUsersRepository is an autogenerated mock type for the ListUsersRepository type
type MockListUsersRepository struct {
	mock.Mock
}

type MockListUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListUsersRepository) EXPECT() *MockListUsersRepository_Expecter {
	return &MockListUsersRepository_Expecter{mock: &_m.Mock}
}

// ListUsers provides a mock function with given fields: ctx, publicIdentifiers
func (_m *MockListUsersRepository) ListUsers(ctx context.Context, publicIdentifiers []string) ([]*entities.User, error) {
	ret := _m.Called(ctx, publicIdentifiers)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*entities.User, error)); ok {
		return rf(ctx, publicIdentifiers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*entities.User); ok {
		r0 = rf(ctx, publicIdentifiers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, publicIdentifiers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListUsersRepository_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockListUsersRepository_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdentifiers []string
func (_e *MockListUsersRepository_Expecter) ListUsers(ctx interface{}, publicIdentifiers interface{}) *MockListUsersRepository_ListUsers_Call {
	return &MockListUsersRepository_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, publicIdentifiers)}
}

func (_c *MockListUsersRepository_ListUsers_Call) Run(run func(ctx context.Context, publicIdentifiers []string)) *MockListUsersRepository_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockListUsersRepository_ListUsers_Call) Return(_a0 []*entities.User, _a1 error) *MockListUsersRepository_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListUsersRepository_ListUsers_Call) RunAndReturn(run func(context.Context, []string) ([]*entities.User, error)) *MockListUsersRepository_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListUsersRepository creates a new instance of MockListUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListUsersRepository {
	mock := &MockListUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
