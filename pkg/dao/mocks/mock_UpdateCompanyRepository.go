// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/in-rich/uservice-linkedin-data/pkg/dao"
	entities "github.com/in-rich/uservice-linkedin-data/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUpdateCompanyRepository is an autogenerated mock type for the UpdateCompanyRepository type
type MockUpdateCompanyRepository struct {
	mock.Mock
}

type MockUpdateCompanyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateCompanyRepository) EXPECT() *MockUpdateCompanyRepository_Expecter {
	return &MockUpdateCompanyRepository_Expecter{mock: &_m.Mock}
}

// UpdateCompany provides a mock function with given fields: ctx, publicIdentifier, data
func (_m *MockUpdateCompanyRepository) UpdateCompany(ctx context.Context, publicIdentifier string, data *dao.UpdateCompanyData) (*entities.Company, error) {
	ret := _m.Called(ctx, publicIdentifier, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompany")
	}

	var r0 *entities.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dao.UpdateCompanyData) (*entities.Company, error)); ok {
		return rf(ctx, publicIdentifier, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *dao.UpdateCompanyData) *entities.Company); ok {
		r0 = rf(ctx, publicIdentifier, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *dao.UpdateCompanyData) error); ok {
		r1 = rf(ctx, publicIdentifier, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdateCompanyRepository_UpdateCompany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCompany'
type MockUpdateCompanyRepository_UpdateCompany_Call struct {
	*mock.Call
}

// UpdateCompany is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdentifier string
//   - data *dao.UpdateCompanyData
func (_e *MockUpdateCompanyRepository_Expecter) UpdateCompany(ctx interface{}, publicIdentifier interface{}, data interface{}) *MockUpdateCompanyRepository_UpdateCompany_Call {
	return &MockUpdateCompanyRepository_UpdateCompany_Call{Call: _e.mock.On("UpdateCompany", ctx, publicIdentifier, data)}
}

func (_c *MockUpdateCompanyRepository_UpdateCompany_Call) Run(run func(ctx context.Context, publicIdentifier string, data *dao.UpdateCompanyData)) *MockUpdateCompanyRepository_UpdateCompany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*dao.UpdateCompanyData))
	})
	return _c
}

func (_c *MockUpdateCompanyRepository_UpdateCompany_Call) Return(_a0 *entities.Company, _a1 error) *MockUpdateCompanyRepository_UpdateCompany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdateCompanyRepository_UpdateCompany_Call) RunAndReturn(run func(context.Context, string, *dao.UpdateCompanyData) (*entities.Company, error)) *MockUpdateCompanyRepository_UpdateCompany_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateCompanyRepository creates a new instance of MockUpdateCompanyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateCompanyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateCompanyRepository {
	mock := &MockUpdateCompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
